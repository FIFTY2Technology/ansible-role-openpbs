---

- name: Verify
  hosts: all
  gather_facts: false

  vars:
    - mpi_node_user: mpiuser

  tasks:
    - name: Check for presence of all PBS moms
      shell:
        cmd: "/opt/pbs/bin/pbsnodes -a | grep -E '(Mom = mpinode1.openpbs|Mom = mpinode2.openpbs)'"
      register: _pbsnodes_a

    - name: Assert correct number of PBS moms was found
      assert:
        quiet: true
        that:
          - _pbsnodes_a.stdout_lines | count == 2

    - name: Check passwordless n-to-n SSH connection
      command:
        cmd: "ssh {{ item }} hostname"
      become: true
      become_user: "{{ mpi_node_user }}"
      register: _ssh_n_to_n
      loop: "{{ ansible_play_batch }}"

    - name: Create submit script for testing
      copy:
        content: |
          #PBS -q myqueue
          hostname
        dest: "/home/{{ mpi_node_user }}/test.sub"
        owner: "{{ mpi_node_user }}"
        group: "{{ mpi_node_user }}"
        mode: '0640'
      run_once: true
      delegate_to: pbsheadnode

      ###
      # 'qsub' arguments:
      #   * -q:        Specify queue name (specified in the submit script, see above)
      #   * -l nodes=: Set specific hostname to run the command on
      #   * -N:        Set name for the job
      #   * -o:        Set output file name with absolute path
      ###
    - name: Submit test-job to PBS queue
      command:
        cmd: >-
          /opt/pbs/bin/qsub
          -l nodes={{ item.node }}
          -N {{ item.name }}
          -o /home/{{ mpi_node_user }}/{{ item.name }}.out
          /home/{{ mpi_node_user }}/test.sub
      become: true
      become_user: "{{ mpi_node_user }}"
      register: _qsub
      loop:
        - node: mpinode1
          name: job1
        - node: mpinode2
          name: job2
      run_once: true
      delegate_to: pbsheadnode

    - name: Receive back the job output file 1
      slurp:
        src: "/home/mpiuser/job1.out"
      register: _job1_output
      run_once: true
      delegate_to: pbsheadnode

    - name: Receive back the job output file 2
      slurp:
        src: "/home/mpiuser/job2.out"
      register: _job2_output
      run_once: true
      delegate_to: pbsheadnode

    - name: Check content of job output files
      assert:
        quiet: true
        that:
          - "_{{ item.name }}_output.content | b64decode | trim == '{{ item.node }}'"
      loop:
        - node: mpinode1
          name: job1
        - node: mpinode2
          name: job2
      run_once: true
